// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LiftPassPricing.Spec.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class LiftPassPricingCalculationFeature : object, Xunit.IClassFixture<LiftPassPricingCalculationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Pricing.feature"
#line hidden
        
        public LiftPassPricingCalculationFeature(LiftPassPricingCalculationFeature.FixtureData fixtureData, LiftPassPricing_Spec_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Lift pass pricing calculation", "This application solves the problem of calculating the pricing for ski lift passe" +
                    "s. There\'s some intricate logic linked to what kind of \r\nlift pass you want, you" +
                    "r age and the specific date at which you\'d like to ski. ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("a baseprice of 35 for 1jour tickets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.And("a baseprice of 19 for night tickets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate the default pricing for single lift pass")]
        [Xunit.TraitAttribute("FeatureTitle", "Lift pass pricing calculation")]
        [Xunit.TraitAttribute("Description", "Calculate the default pricing for single lift pass")]
        public virtual void CalculateTheDefaultPricingForSingleLiftPass()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the default pricing for single lift pass", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 10
 testRunner.When("the price for a ticket is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("a single ticket costs 19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate the default pricing for single night-lift pass")]
        [Xunit.TraitAttribute("FeatureTitle", "Lift pass pricing calculation")]
        [Xunit.TraitAttribute("Description", "Calculate the default pricing for single night-lift pass")]
        public virtual void CalculateTheDefaultPricingForSingleNight_LiftPass()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the default pricing for single night-lift pass", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 14
 testRunner.When("the price for a night ticket is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("a single ticket costs 19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate prices and reductions for different ages for daily ticket")]
        [Xunit.TraitAttribute("FeatureTitle", "Lift pass pricing calculation")]
        [Xunit.TraitAttribute("Description", "Calculate prices and reductions for different ages for daily ticket")]
        public virtual void CalculatePricesAndReductionsForDifferentAgesForDailyTicket()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate prices and reductions for different ages for daily ticket", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "age"});
                table1.AddRow(new string[] {
                            "5"});
                table1.AddRow(new string[] {
                            "6"});
                table1.AddRow(new string[] {
                            "14"});
                table1.AddRow(new string[] {
                            "15"});
                table1.AddRow(new string[] {
                            "25"});
                table1.AddRow(new string[] {
                            "64"});
                table1.AddRow(new string[] {
                            "65"});
#line 18
 testRunner.Given("an age of", ((string)(null)), table1, "Given ");
#line hidden
#line 27
 testRunner.When("the price for a ticket is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "cost"});
                table2.AddRow(new string[] {
                            "0"});
                table2.AddRow(new string[] {
                            "25"});
                table2.AddRow(new string[] {
                            "25"});
                table2.AddRow(new string[] {
                            "35"});
                table2.AddRow(new string[] {
                            "35"});
                table2.AddRow(new string[] {
                            "35"});
                table2.AddRow(new string[] {
                            "27"});
#line 28
 testRunner.Then("it costs", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate prices and reductions for different ages for night ticket")]
        [Xunit.TraitAttribute("FeatureTitle", "Lift pass pricing calculation")]
        [Xunit.TraitAttribute("Description", "Calculate prices and reductions for different ages for night ticket")]
        public virtual void CalculatePricesAndReductionsForDifferentAgesForNightTicket()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate prices and reductions for different ages for night ticket", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "age"});
                table3.AddRow(new string[] {
                            "5"});
                table3.AddRow(new string[] {
                            "6"});
                table3.AddRow(new string[] {
                            "14"});
                table3.AddRow(new string[] {
                            "15"});
                table3.AddRow(new string[] {
                            "25"});
                table3.AddRow(new string[] {
                            "64"});
                table3.AddRow(new string[] {
                            "65"});
#line 39
 testRunner.Given("an age of", ((string)(null)), table3, "Given ");
#line hidden
#line 48
 testRunner.When("the price for a night ticket is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "cost"});
                table4.AddRow(new string[] {
                            "0"});
                table4.AddRow(new string[] {
                            "25"});
                table4.AddRow(new string[] {
                            "25"});
                table4.AddRow(new string[] {
                            "35"});
                table4.AddRow(new string[] {
                            "35"});
                table4.AddRow(new string[] {
                            "35"});
                table4.AddRow(new string[] {
                            "27"});
#line 49
 testRunner.Then("it costs", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate prices and reductions for Monday deals")]
        [Xunit.TraitAttribute("FeatureTitle", "Lift pass pricing calculation")]
        [Xunit.TraitAttribute("Description", "Calculate prices and reductions for Monday deals")]
        public virtual void CalculatePricesAndReductionsForMondayDeals()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate prices and reductions for Monday deals", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "age",
                            "date"});
                table5.AddRow(new string[] {
                            "15",
                            "2019-02-22"});
                table5.AddRow(new string[] {
                            "15",
                            "2019-02-25"});
                table5.AddRow(new string[] {
                            "15",
                            "2019-03-11"});
                table5.AddRow(new string[] {
                            "65",
                            "2019-03-11"});
#line 60
 testRunner.Given("an age and date of", ((string)(null)), table5, "Given ");
#line hidden
#line 66
 testRunner.When("the price for a night ticket is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "cost"});
                table6.AddRow(new string[] {
                            "35"});
                table6.AddRow(new string[] {
                            "35"});
                table6.AddRow(new string[] {
                            "23"});
                table6.AddRow(new string[] {
                            "13"});
#line 67
 testRunner.Then("it costs", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                LiftPassPricingCalculationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                LiftPassPricingCalculationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
